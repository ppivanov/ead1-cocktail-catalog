@page "/catalog"
@page "/catalog/{searchString}"
@inject HttpClient Http
@inject NavigationManager NavManager

<h1>Catalog</h1>

@if (string.IsNullOrEmpty(randomJoke))
{
    <p><em>Loading...</em></p>
}
else
{
    <p>@WebUtility.HtmlDecode(randomJoke)</p>
    <div class="pagination">
        @for (int i = 65; i <= 90; i++)
        {
            int tempIndex = i;
            <a @onclick="(() => FilterByCharacter(tempIndex))">@GetChar(i)</a>
        }
    </div>
    if (cocktailDrinks.Count == 0)
    {
        <p>Sorry, no drinks match your search</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Image</th>
                    <th>Drink</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var drink in cocktailDrinks)
                {
                    <tr @onclick="(() => RedirectToCocktailDetails(drink.IdDrink))">
                        <td class="col-3"><img src="@drink.StrDrinkThumb" class="w-100" /></td>
                        <td>@drink.StrDrink</td>
                    </tr>
                }
            </tbody>
        </table>
    }

}

@code {

    [Parameter]
    public string SearchString { get; set; }
    private string randomJoke = "";

    private List<CocktailDrink> cocktailDrinks = new List<CocktailDrink>();

    const string baseCocktailDbUrl = "https://www.thecocktaildb.com/api/json/v1/1/";

    protected override async Task OnInitializedAsync()
    {
        await GetRandomNorrisJoke();
        await UpdateCatalog();
    }

    protected override async void OnParametersSet()
    {
        await UpdateCatalog();
    }

    private async Task GetRandomNorrisJoke()
    {
        var jokeResponse = await Http.GetFromJsonAsync<ChuckNorrisJokeResponse>("https://api.icndb.com/jokes/random");
        randomJoke = jokeResponse.Value.Joke;
    }


    private async Task UpdateCatalog()
    {
        try
        {
            string endpoint = string.IsNullOrEmpty(SearchString) ? "filter.php?c=Cocktail" : $"search.php?s={SearchString}";
            var cocktailResponse = await Http.GetFromJsonAsync<CocktailDbResponse>($"{baseCocktailDbUrl}{endpoint}");
            cocktailDrinks = cocktailResponse.Drinks.ToList();
        }
        catch (Exception)
        {
            cocktailDrinks = new List<CocktailDrink>();
        }

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async Task FilterByCharacter(int firstCharacterAsInt)
    {
        char firstCharacter = GetChar(firstCharacterAsInt);
        var cocktailResponse = await Http.GetFromJsonAsync<CocktailDbResponse>($"{baseCocktailDbUrl}search.php?f={firstCharacter}");
        try
        {
            cocktailDrinks = cocktailResponse.Drinks.ToList();
        }
        catch (Exception)
        {
            cocktailDrinks = new List<CocktailDrink>();
        }
    }

    private void RedirectToCocktailDetails(string id)
    {
        NavManager.NavigateTo($"/drink/{id}");
    }

    private char GetChar(int i)
    {
        return (char)i;
    }
}
