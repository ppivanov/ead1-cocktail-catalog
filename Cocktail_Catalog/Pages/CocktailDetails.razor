@page "/drink/{id}"
@inject HttpClient Http

<div class="drink-details container">
    <div class="row">
        <h3 class="col">Cocktail Details</h3>

    </div>
    @if (drink == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="row">
            <div class="col-5">
                <img src="@drink.StrDrinkThumb"
                     class="details-image" />
            </div>
            <div class="col-7">
                <div class="row">
                    <h3 class="col">@Title</h3>
                </div>
                @if (drink.StrGlass != null)
                {
                    <div class="row">
                        <p class="col">Glass: @drink.StrGlass</p>
                    </div>
                }
                <div class="row">
                    <div class="ingredients col">
                        <h4 class="col-4">Ingredients</h4>
                        @foreach (var ingredient in drink.Ingredients)
                        {
                            <p>@ingredient.Ingredient (@ingredient.Measure)</p>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <h3>Instructions</h3>
                <hr />
                <p>
                    @drink.StrInstructions
                </p>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private string CocktailDbUrl { get; set; }
    private CocktailDrink drink { get; set; }

    private string Title
    {
        get
        {
            StringBuilder title = new StringBuilder(drink.StrDrink);
            if (!string.IsNullOrEmpty(drink.StrAlcoholic))
            {
                title.Append($" ({drink.StrAlcoholic})");
            }

            return title.ToString();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var config = await Http.GetFromJsonAsync<Settings>("appsettings.json");
        CocktailDbUrl = config.BaseURLs.CocktailDb;
        await GetCocktailDetails();
    }

    private async Task GetCocktailDetails()
    {
        try
        {
            string endpoint = $"lookup.php?i={Id}";
            var cocktailResponse = await Http.GetFromJsonAsync<CocktailDbResponse>($"{CocktailDbUrl}/{endpoint}");
            drink = cocktailResponse.Drinks[0];
        }
        catch (Exception)
        {
            drink = null;
        }

        await InvokeAsync(() =>
            {
                StateHasChanged();
            }
        );
    }
}
